import React from 'react';
import qs from 'qs';

import PizzaBlock from '../components/PizzaBlock/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Sort, { sortValues } from '../components/Sort';
import Categories from '../components/Categories';
import Pagination from '../components/Pagination';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { selectFilter, setFilters } from '../redux/slices/filterSlice';
import { fetchPizzas, selectPizzasData } from '../redux/slices/pizzasSlice';


export const Home = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { items, status } = useSelector(selectPizzasData);

  const {
    categoryId,
    sort,
    searchValue,
    currentPage,
  } = useSelector(selectFilter);

  const getPizzas = () => {
    const category = categoryId > 0 ? `&category=${categoryId}` : '';
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'desc' : 'asc';
    const search = searchValue ? `&search=${searchValue}` : '';

    dispatch(fetchPizzas({
      category,
      sortBy,
      order,
      search,
      currentPage,
    }));
  };

  React.useEffect(() => {
    // —É—Å–ª–æ–≤–∏–µ –±—ã–ª –ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    // –Ω–µ –≤—à–∏–≤–∞–ª–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,
    // –∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ–º —Ñ–∏–ª—å—Ç—Ä–∞
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      });

      navigate(`?${queryString}`);
    }
    isMounted.current = true; // –ø–æ—Å–ª–µ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç true
  }, [categoryId, sort, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  // –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));

      const sort = sortValues.find(obj =>
        obj.sortProperty === params.sortProperty);

      dispatch(setFilters({ ...params, sort }));

      isSearch.current = true;
    }
  }, []);

  React.useEffect(() => {
    // —á—Ç–æ–±—ã –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –∑–∞–ø—Ä–æ—Å
    // —Å –∏—Ö –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ–±
    // –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—å–º—É—Ç—Å—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø–∏—à—É—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Å –¥–∏—Å–ø–∞—Ç—á–µ–º
    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;

    window.scrollTo(0, 0);
  }, [categoryId, sort, searchValue, currentPage]);

  const skeletons = [...new Array(6)].map((_, i) => (<Skeleton key={i}/>));

  const pizzas = items.map((pizzaObj) => (
    <PizzaBlock
      key={pizzaObj.id}
      // title={title}
      // price={price}
      // imageUrl={imageUrl}
      // sizes={sizes}
      // types={types}
      {...pizzaObj}
    />
  ));

  return (
    <div className="container">
      <div className="content__top">
        <Categories />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {
        status === 'error' ? (
        <div className='error'>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p> –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã.
          –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ ... </p>
        </div>
        ) : (
          <div className="content__items">
            { status === 'loading' ? skeletons : pizzas }
          </div>
        )
      }
      <Pagination />
    </div>
  );
};

